#!/usr/bin/env ruby
require 'socket'

require 'mysqlx/protobuf'

ClientMessage = {
  Mysqlx::Protobuf::ClientMessages::Type::CON_CAPABILITIES_GET.to_i => Mysqlx::Protobuf::Connection::CapabilitiesGet,
  Mysqlx::Protobuf::ClientMessages::Type::CON_CAPABILITIES_SET.to_i => Mysqlx::Protobuf::Connection::CapabilitiesSet,
  Mysqlx::Protobuf::ClientMessages::Type::CON_CLOSE.to_i => Mysqlx::Protobuf::Connection::Close,
  Mysqlx::Protobuf::ClientMessages::Type::SESS_AUTHENTICATE_START.to_i => Mysqlx::Protobuf::Session::AuthenticateStart,
  Mysqlx::Protobuf::ClientMessages::Type::SESS_AUTHENTICATE_CONTINUE.to_i => Mysqlx::Protobuf::Session::AuthenticateContinue,
  Mysqlx::Protobuf::ClientMessages::Type::SESS_RESET.to_i => Mysqlx::Protobuf::Session::Reset,
  Mysqlx::Protobuf::ClientMessages::Type::SESS_CLOSE.to_i => Mysqlx::Protobuf::Session::Close,
  Mysqlx::Protobuf::ClientMessages::Type::SQL_STMT_EXECUTE.to_i => Mysqlx::Protobuf::Sql::StmtExecute,
  Mysqlx::Protobuf::ClientMessages::Type::CRUD_FIND.to_i => Mysqlx::Protobuf::Crud::Find,
  Mysqlx::Protobuf::ClientMessages::Type::CRUD_INSERT.to_i => Mysqlx::Protobuf::Crud::Insert,
  Mysqlx::Protobuf::ClientMessages::Type::CRUD_UPDATE.to_i => Mysqlx::Protobuf::Crud::Update,
  Mysqlx::Protobuf::ClientMessages::Type::CRUD_DELETE.to_i => Mysqlx::Protobuf::Crud::Delete,
  Mysqlx::Protobuf::ClientMessages::Type::EXPECT_OPEN.to_i => Mysqlx::Protobuf::Expect::Open,
  Mysqlx::Protobuf::ClientMessages::Type::EXPECT_CLOSE.to_i => Mysqlx::Protobuf::Expect::Close,
}

ServerMessage = {
  Mysqlx::Protobuf::ServerMessages::Type::OK.to_i => Mysqlx::Protobuf::Ok,
  Mysqlx::Protobuf::ServerMessages::Type::ERROR.to_i => Mysqlx::Protobuf::Error,
  Mysqlx::Protobuf::ServerMessages::Type::CONN_CAPABILITIES.to_i => Mysqlx::Protobuf::Connection::Capabilities,
  Mysqlx::Protobuf::ServerMessages::Type::SESS_AUTHENTICATE_CONTINUE.to_i => Mysqlx::Protobuf::Session::AuthenticateContinue,
  Mysqlx::Protobuf::ServerMessages::Type::SESS_AUTHENTICATE_OK.to_i => Mysqlx::Protobuf::Session::AuthenticateOk,
  Mysqlx::Protobuf::ServerMessages::Type::NOTICE.to_i => Mysqlx::Protobuf::Notice::Frame,
  Mysqlx::Protobuf::ServerMessages::Type::RESULTSET_COLUMN_META_DATA.to_i => Mysqlx::Protobuf::Resultset::ColumnMetaData,
  Mysqlx::Protobuf::ServerMessages::Type::RESULTSET_ROW.to_i => Mysqlx::Protobuf::Resultset::Row,
  Mysqlx::Protobuf::ServerMessages::Type::RESULTSET_FETCH_DONE.to_i => Mysqlx::Protobuf::Resultset::FetchDone,
  Mysqlx::Protobuf::ServerMessages::Type::RESULTSET_FETCH_DONE_MORE_RESULTSETS.to_i => Mysqlx::Protobuf::Resultset::FetchDoneMoreResultsets,
  Mysqlx::Protobuf::ServerMessages::Type::SQL_STMT_EXECUTE_OK.to_i => Mysqlx::Protobuf::Sql::StmtExecuteOk,
  Mysqlx::Protobuf::ServerMessages::Type::RESULTSET_FETCH_DONE_MORE_OUT_PARAMS.to_i => Mysqlx::Protobuf::Resultset::FetchDoneMoreOutParams,
}

def relay(r, w, from)
  while true
    head = r.read(5)
    break unless head && head.length == 5
    size, type = head.unpack('VC')
    data = r.read(size-1)
    break unless data && data.length == size-1
    w.write(head + data)
    if from == :client
      puts "C: #{ClientMessage[type] || type}"
      p ClientMessage[type].decode(data)
    else
      puts "S: #{ServerMessage[type] || type}"
      p ServerMessage[type].decode(data)
    end
  end
rescue => e
  p e
end

localport, host, port = ARGV
Socket.tcp_server_loop(localport) do |client, _addrinfo|
  server = TCPSocket.new(host, port)
  Thread.new(client) do |_client|
    relay(_client, server, :client)
  end
  Thread.new(client) do |_client|
    relay(server, _client, :server)
  end
end
